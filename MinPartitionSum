import java.util.Arrays;

public class MinDifferencePartition {

   public static int minDifference(int[] arr, int n, int k) {
       int[] prefix_sum = new int[n];
       int[] suffix_sum = new int[n];

       // Calculate prefix sums
       prefix_sum[0] = arr[0];
       for (int i = 1; i < n; i++) {
           prefix_sum[i] = prefix_sum[i - 1] + arr[i];
       }

       // Calculate suffix sums
       suffix_sum[n - 1] = arr[n - 1];
       for (int i = n - 2; i >= 0; i--) {
           suffix_sum[i] = suffix_sum[i + 1] + arr[i];
       }

       Arrays.sort(suffix_sum); // Sort suffix sums for efficient comparison

       int minDiff = Integer.MAX_VALUE;
       for (int i = 0; i <= n - k; i++) {
           // Find the closest suffix sum to prefix_sum[i] - prefix_sum[i-k+1]
           int target = prefix_sum[i] - (i >= k - 1 ? prefix_sum[i - k + 1] : 0);
           int closestIndex = Arrays.binarySearch(suffix_sum, target);

           // Adjust index for insertion point if not found
           if (closestIndex < 0) {
               closestIndex = -closestIndex - 1;
           }

           int closestSum = suffix_sum[closestIndex];
           int diff = Math.abs(target - closestSum);
           minDiff = Math.min(minDiff, diff);
       }

       return minDiff;
   }

   public static void main(String[] args) {
       int[] arr = {1, 2, 4, 7, 3, 6, 9};
       int n = arr.length;
       int k = 4;
       int minDiff = minDifference(arr, n, k);
       System.out.println("Minimum difference: " + minDiff);
   }
}
