import java.util.*;
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node==null){
            return null;
        }
        Queue<Node> q = new LinkedList<Node>();
        q.add(node);
 
        // An HashMap to keep track of all the
        // nodes which have already been created
        HashMap<Node,Node> hm =
                        new HashMap<Node,Node>();
        
        hm.put(node,new Node(node.val));
        while(!q.isEmpty()){
            Node temp=q.poll();
            
            Node cloned=hm.get(temp);
            if(temp.neighbors!=null){
                List<Node> v=temp.neighbors;
                
                for(Node orgNode:v){
                    Node ng=hm.get(orgNode);
                    
                    if(ng==null){
                        ng=new Node(orgNode.val);
                        q.add(orgNode);
                        hm.put(orgNode,ng);
                    }
                    cloned.neighbors.add(ng);
                }
            }
        }
        return hm.get(node);
    }
}
