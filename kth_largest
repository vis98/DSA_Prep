//kth largest using maxheap to use
//kth smallest using minheap

class Solution {
    public void heapify(int arr[], int n, int i) {
      // Find largest among root, left child and right child
      int largest = i;
      int l = 2 * i + 1;
      int r = 2 * i + 2;
  
      if (l < n && arr[l] > arr[largest])
        largest = l;
  
      if (r < n && arr[r] > arr[largest])
        largest = r;
  
      // Swap and continue heapifying if root is not largest
      if (largest != i) {
        int swap = arr[i];
        arr[i] = arr[largest];
        arr[largest] = swap;
  
        heapify(arr, n, largest);
      }
     }
    public int findKthLargest(int[] arr, int k) {
        int n=arr.length;
       for (int i = n / 2 - 1; i >= 0; i--) {
          heapify(arr, n, i);
      }
      for (int i = n - 1; i >= n-k; i--) {
        int temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
  
        // Heapify root element
        heapify(arr, i, 0);
      }
        return arr[n-k];
    }
     
}
