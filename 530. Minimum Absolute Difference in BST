/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int minDiff=Integer.MAX_VALUE;
      private TreeNode prev;
    
    public int getMinimumDifference(TreeNode root) {
         inOrderTraversal(root);
        return minDiff;
    }
     private void inOrderTraversal(TreeNode node) {
        if (node == null) {
            return;
        }

        // Recursively traverse the left subtree
        inOrderTraversal(node.left);

        // Calculate the absolute difference between the current node's value and the previous node's value
        if (prev != null) {
            int diff = Math.abs(node.val - prev.val);
            minDiff = Math.min(minDiff, diff);
                        System.out.println("prev"+prev.val+"current"+node.val+"minDiff"+minDiff);

        }
        prev = node;
        // Update the previous node to the current node

        // Recursively traverse the right subtree
        inOrderTraversal(node.right);
    }
}
