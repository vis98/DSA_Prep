class Solution {
    private  List<List<Integer>> adj;
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if(numCourses==0 || prerequisites.length==0){
            return true;
        }
                adj = new ArrayList<>(numCourses);

        for(int i=0;i<numCourses;i++){
            adj.add(new LinkedList<>());
        }
         for(int i=0;i<prerequisites.length;i++){
            
                adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
            }
            boolean res=false;
            res=detectCycle(adj,numCourses);
            if(res==true){
                return false;
            }
            return true;

        
    }
    private boolean detectCycle(List<List<Integer>> adj,int numCourses){
         boolean[] visited = new boolean[numCourses];
        boolean[] recStack = new boolean[numCourses];
         
        for(int i=0;i<visited.length;i++){

            if(!visited[i]){
                if(detectCycleUtil(i,adj,visited,recStack)){
                    return true;
                }
            }
        }
        return false;
    }
    private boolean detectCycleUtil(int v,List<List<Integer>> adj,boolean visited[],boolean recStack[]){
        recStack[v]=true;
        visited[v]=true;
        List<Integer> child=adj.get(v);
        for(Integer c:child){
            if(!visited[c]){
                if(detectCycleUtil(c,adj,visited,recStack)){
                    return true;
                }
            }
            else if(recStack[c]){
                return true;
            }
        }
        recStack[v]=false;
        return false;
    }
}
