import java.util.*;

class Solution {
    
    public int largestMagicSquare(int[][] grid) {
        int maxSize = 1; //took help from gpt
        

        int rows = grid.length;
        int cols = grid[0].length;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                for (int size = 1; size <= Math.min(rows - i, cols - j); size++) {
                    if (isMagicSquare(grid, i, j, size)) {
                        maxSize = Math.max(maxSize, size);
                    }
                }
            }
        }
        return maxSize;
    }
    
    private boolean isMagicSquare(int[][] grid, int row, int col, int size) {
        int targetSum = 0;
        for (int j = col; j < col + size; j++) {
            targetSum += grid[row][j];
        }
        
        // Check all rows
        for (int i = row; i < row + size; i++) {
            int rowSum = 0;
            for (int j = col; j < col + size; j++) {
                rowSum += grid[i][j];
            }
            if (rowSum != targetSum) return false;
        }

        // Check all columns
        for (int j = col; j < col + size; j++) {
            int colSum = 0;
            for (int i = row; i < row + size; i++) {
                colSum += grid[i][j];
            }
            if (colSum != targetSum) return false;
        }

        // Check main diagonal
        int diag1Sum = 0;
        for (int i = 0; i < size; i++) {
            diag1Sum += grid[row + i][col + i];
        }
        if (diag1Sum != targetSum) return false;

        // Check anti-diagonal
        int diag2Sum = 0;
        for (int i = 0; i < size; i++) {
            diag2Sum += grid[row + i][col + size - 1 - i];
        }
        if (diag2Sum != targetSum) return false;

        return true;
    }
}
