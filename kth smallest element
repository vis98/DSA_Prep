class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int co=0;
        int n=matrix.length;
        int in=0;
        int arr[]=new int[n*n];
        for(int i=0;i<n;i++){
            for(int j=0;j<matrix[0].length;j++){
                arr[in]=matrix[i][j];
                co++;
                buildMaxHeap(arr,in,in+1);
                in++;
               
            }
           
        }
        int re;
             re= extractKthsmallest(arr,k);
       
        return re;
    }
   
    void buildMaxHeap(int arr[],int pos,int size){
         
        int parent;
        while(pos>0){
            parent=(pos-1)/2;
            if(arr[pos]>arr[parent]){
                //swap arr(pos) & arr(parent)
                int te=arr[parent];
                arr[parent]=arr[pos];
                arr[pos]=te;
                pos=parent;
            }
            else{
                break;
            }
        }
       
    }
    int extractKthsmallest(int arr[],int k){
        for (int i = arr.length - 1; i >=k; i--) {
            // Move current root to end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;
 
            // call max heapify on the reduced heap
            heapify(arr, i, 0);
        }
        return arr[0];
    }
    void heapify(int arr[], int n, int i)
    {   int largest=i;
        int l=(2*i)+1;
        int r=(2*i)+2;
     if (l < n && arr[l] > arr[largest])
            largest = l;
 
        // If right child is larger than largest so far
        if (r < n && arr[r] > arr[largest])
            largest = r;
 
        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
 
            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }

    }
}
