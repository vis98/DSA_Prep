class Solution {
    public int diagonalPrime(int[][] nums) {
        int largestPrime=0;
        for(int i=0;i<nums.length;i++){
            for(int j=0;j<nums[i].length;j++){
                if(i==j){
                    if(isPrime(nums[i][j])){
                        largestPrime=largestPrime>nums[i][j]?largestPrime:nums[i][j];
                    }
                }
            }
        }
        int l=0;int k=nums.length-1;
        while(l<=nums.length-1 && k>=0){
            if(isPrime(nums[l][k]) && l!=k){
                        largestPrime=largestPrime>nums[l][k]?largestPrime:nums[l][k];
                    }
            l++;
            k--;
        }
         largestPrime=(largestPrime==1)?0:largestPrime;
        return largestPrime;
    }
    
    boolean isPrime(int number){
        double no=Math.sqrt(number);
        for(int i=2;i<=no;i++){
            if(number%i==0){
                return false;
            }
        }
        return true;
    }
}
