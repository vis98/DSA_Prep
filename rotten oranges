class Element{
    int time;
    int x;
    int y;
    Element(int a,int b,int t){
        this.x=a;
        this.y=b;
        this.time=t;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Element> q=new LinkedList<Element>();
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==2){
                    q.add(new Element(i,j,0));
            }
            }
        }
        
        int max=-1;
        int m=grid.length;
        int  n=grid[0].length;

        while(!q.isEmpty()){
            Element temp;
            temp=q.poll();
            if(temp.x<m && temp.y+1<n && grid[temp.x][temp.y+1]==1){
                grid[temp.x][temp.y+1]=2;
                q.add(new Element(temp.x,temp.y+1,temp.time+1));
                max=temp.time+1;
            }
            if(temp.x<m && temp.y-1>=0 && grid[temp.x][temp.y-1]==1){
                 grid[temp.x][temp.y-1]=2;
                q.add(new Element(temp.x,temp.y-1,temp.time+1));
                max=temp.time+1;
            }
            if(temp.x-1>=0 && temp.y<n && grid[temp.x-1][temp.y]==1){
               grid[temp.x-1][temp.y]=2;
                q.add(new Element(temp.x-1,temp.y,temp.time+1));
                max=temp.time+1;
            }
            if(temp.x+1<m && temp.y<n && grid[temp.x+1][temp.y]==1){
               grid[temp.x+1][temp.y]=2;
                q.add(new Element(temp.x+1,temp.y,temp.time+1));
                max=temp.time+1;
            }
        }

        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==1){
                    return -1;
            }
            }
        }
        return max>-1? max:0;


    }
}
