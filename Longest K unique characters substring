//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;

class GfG {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            String s = sc.next();
            int k = sc.nextInt();
            Solution obj = new Solution();
            System.out.println(obj.longestkSubstr(s, k));
        }
    }
}
// } Driver Code Ends

// User function Template for Java

class Solution {
    public int longestkSubstr(String str, int k) {
         HashMap<Character, Integer> charFreqMap = new HashMap<>();

        // Initialize the start and end pointers.
        int start = 0;
        int end = 0;
        
        if(k>str.length()){
            return -1;
        }

        // Initialize the maximum substring length.
        int maxLen = -1;

        // Iterate over the string.
        for (int i = 0; i < str.length(); i++) {
            // Update the character frequency.
            charFreqMap.put(str.charAt(i), charFreqMap.getOrDefault(str.charAt(i), 0) + 1);

            // If the number of unique characters exceeds K, then move the start pointer forward.
            while (charFreqMap.size() > k) {
                charFreqMap.put(str.charAt(start), charFreqMap.get(str.charAt(start)) - 1);
                if (charFreqMap.get(str.charAt(start)) == 0) {
                    charFreqMap.remove(str.charAt(start));
                }
                start++;
            }

            // Update the maximum substring length.
            maxLen = Math.max(maxLen, i - start + 1);
        }

        return maxLen;
    }
}
